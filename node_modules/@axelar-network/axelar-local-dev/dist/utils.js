'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLogger = exports.httpGet = exports.setJSON = exports.deployContract = exports.defaultAccounts = exports.getLogID = exports.getRandomID = exports.getSignedMultisigExecuteInput = exports.getSignedExecuteInput = exports.bigNumberToNumber = exports.logger = void 0;
var ethers_1 = require("ethers");
var _a = ethers_1.ethers.utils, defaultAbiCoder = _a.defaultAbiCoder, id = _a.id, arrayify = _a.arrayify, keccak256 = _a.keccak256;
var http_1 = __importDefault(require("http"));
var outputJsonSync = require('fs-extra').outputJsonSync;
var sortBy = require('lodash').sortBy;
exports.logger = { log: console.log };
var getRandomInt = function (max) {
    return Math.floor(Math.random() * max);
};
function bigNumberToNumber(bigNumber) {
    return bigNumber.toNumber();
}
exports.bigNumberToNumber = bigNumberToNumber;
function getSignedExecuteInput(data, wallet) {
    return __awaiter(this, void 0, void 0, function () {
        var signature, signData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, wallet.signMessage(arrayify(keccak256(data)))];
                case 1:
                    signature = _a.sent();
                    signData = defaultAbiCoder.encode(['address[]', 'bytes[]'], [[wallet.address], [signature]]);
                    return [2 /*return*/, defaultAbiCoder.encode(['bytes', 'bytes'], [data, signData])];
            }
        });
    });
}
exports.getSignedExecuteInput = getSignedExecuteInput;
function getSignedMultisigExecuteInput(data, wallets) {
    return __awaiter(this, void 0, void 0, function () {
        var sorted, signatures, _i, sorted_1, wallet, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    sorted = sortBy(wallets, function (wallet) { return wallet.address.toLowerCase(); });
                    signatures = [];
                    _i = 0, sorted_1 = sorted;
                    _c.label = 1;
                case 1:
                    if (!(_i < sorted_1.length)) return [3 /*break*/, 4];
                    wallet = sorted_1[_i];
                    _b = (_a = signatures).push;
                    return [4 /*yield*/, wallet.signMessage(arrayify(keccak256(data)))];
                case 2:
                    _b.apply(_a, [_c.sent()]);
                    _c.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, defaultAbiCoder.encode(['bytes', 'bytes[]'], [data, signatures])];
            }
        });
    });
}
exports.getSignedMultisigExecuteInput = getSignedMultisigExecuteInput;
var getRandomID = function () { return id(getRandomInt(1e10).toString()); };
exports.getRandomID = getRandomID;
var getLogID = function (chain, log) {
    return id(chain + ':' + log.blockNumber + ':' + log.transactionIndex + ':' + log.logIndex);
};
exports.getLogID = getLogID;
var defaultAccounts = function (n, seed) {
    if (seed === void 0) { seed = ''; }
    var balance = BigInt(1e30);
    var privateKeys = [];
    var key = keccak256(defaultAbiCoder.encode(['string'], [seed]));
    for (var i = 0; i < n; i++) {
        privateKeys.push(key);
        key = keccak256(key);
    }
    return privateKeys.map(function (secretKey) { return ({ balance: balance, secretKey: secretKey }); });
};
exports.defaultAccounts = defaultAccounts;
var deployContract = function (wallet, contractJson, args, options) {
    if (args === void 0) { args = []; }
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var factory, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    factory = new ethers_1.ContractFactory(contractJson.abi, contractJson.bytecode, wallet);
                    return [4 /*yield*/, factory.deploy.apply(factory, __spreadArray(__spreadArray([], args, false), [__assign({}, options)], false))];
                case 1:
                    contract = _a.sent();
                    return [4 /*yield*/, contract.deployed()];
                case 2:
                    _a.sent();
                    return [2 /*return*/, contract];
            }
        });
    });
};
exports.deployContract = deployContract;
var setJSON = function (data, name) {
    outputJsonSync(name, data, {
        spaces: 2,
        EOL: '\n',
    });
};
exports.setJSON = setJSON;
var httpGet = function (url) {
    return new Promise(function (resolve, reject) {
        http_1.default.get(url, function (res) {
            var statusCode = res.statusCode;
            var contentType = res.headers['content-type'];
            var error;
            if (statusCode !== 200) {
                error = new Error('Request Failed.\n' + "Status Code: ".concat(statusCode));
            }
            else if (!/^application\/json/.test(contentType)) {
                error = new Error('Invalid content-type.\n' + "Expected application/json but received ".concat(contentType));
            }
            if (error) {
                res.resume();
                reject(error);
                return;
            }
            res.setEncoding('utf8');
            var rawData = '';
            res.on('data', function (chunk) {
                rawData += chunk;
            });
            res.on('end', function () {
                try {
                    var parsedData = JSON.parse(rawData);
                    resolve(parsedData);
                }
                catch (e) {
                    reject(e);
                }
            });
        });
    });
};
exports.httpGet = httpGet;
function setLogger(log) {
    exports.logger.log = log;
}
exports.setLogger = setLogger;
//# sourceMappingURL=utils.js.map