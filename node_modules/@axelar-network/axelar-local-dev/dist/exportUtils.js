'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.destroyExported = exports.forkAndExport = exports.createAndExport = void 0;
var ethers_1 = require("ethers");
var utils_1 = require("./utils");
var relay_1 = require("./relay");
var networkUtils_1 = require("./networkUtils");
var info_1 = require("./info");
var interval;
function createAndExport(options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var defaultOptions, option, chains_local, i, _loop_1, _i, _a, name_1;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    defaultOptions = {
                        chainOutputPath: './local.json',
                        accountsToFund: [],
                        fundAmount: ethers_1.ethers.utils.parseEther('100').toString(),
                        chains: ['Moonbeam', 'Avalanche', 'Fantom', 'Ethereum', 'Polygon'],
                        port: 8500,
                        relayInterval: 2000,
                    };
                    for (option in defaultOptions)
                        options[option] = options[option] || defaultOptions[option];
                    chains_local = [];
                    i = 0;
                    _loop_1 = function (name_1) {
                        var chain, testnet, info, user, _c, _d, account;
                        return __generator(this, function (_e) {
                            switch (_e.label) {
                                case 0: return [4 /*yield*/, (0, networkUtils_1.createNetwork)({
                                        name: name_1,
                                        seed: name_1,
                                        ganacheOptions: {},
                                    })];
                                case 1:
                                    chain = _e.sent();
                                    testnet = info_1.testnetInfo.find(function (info) {
                                        return info.name == name_1;
                                    });
                                    info = chain.getCloneInfo();
                                    info.rpc = "http://localhost:".concat(options.port, "/").concat(i);
                                    (info.tokenName = testnet === null || testnet === void 0 ? void 0 : testnet.tokenName), (info.tokenSymbol = testnet === null || testnet === void 0 ? void 0 : testnet.tokenSymbol), chains_local.push(info);
                                    user = chain.userWallets[0];
                                    _c = 0, _d = options.accountsToFund;
                                    _e.label = 2;
                                case 2:
                                    if (!(_c < _d.length)) return [3 /*break*/, 5];
                                    account = _d[_c];
                                    return [4 /*yield*/, user
                                            .sendTransaction({
                                            to: account,
                                            value: options.fundAmount,
                                        })
                                            .then(function (tx) { return tx.wait(); })];
                                case 3:
                                    _e.sent();
                                    _e.label = 4;
                                case 4:
                                    _c++;
                                    return [3 /*break*/, 2];
                                case 5:
                                    if (!options.callback) return [3 /*break*/, 7];
                                    return [4 /*yield*/, options.callback(chain, info)];
                                case 6:
                                    _e.sent();
                                    _e.label = 7;
                                case 7:
                                    i++;
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, _a = options.chains;
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    name_1 = _a[_i];
                    return [5 /*yield**/, _loop_1(name_1)];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4:
                    (0, networkUtils_1.listen)(options.port);
                    interval = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                        var relayData;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, (0, relay_1.relay)()];
                                case 1:
                                    relayData = _a.sent();
                                    if (options.afterRelay)
                                        options.afterRelay(relayData);
                                    return [2 /*return*/];
                            }
                        });
                    }); }, options.relayInterval);
                    (0, utils_1.setJSON)(chains_local, options.chainOutputPath);
                    return [2 /*return*/];
            }
        });
    });
}
exports.createAndExport = createAndExport;
function forkAndExport(options) {
    var _a;
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var defaultOptions, option, chains_local, chainsRaw, chains, i, _i, chains_1, chain, network, info, user, _b, _c, account;
        var _this = this;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    defaultOptions = {
                        chainOutputPath: './local.json',
                        accountsToFund: [],
                        fundAmount: ethers_1.ethers.utils.parseEther('100').toString(),
                        env: 'mainnet',
                        chains: [],
                        port: 8500,
                        relayInterval: 2000,
                        networkOptions: {},
                    };
                    for (option in defaultOptions)
                        options[option] = options[option] || defaultOptions[option];
                    chains_local = [];
                    if (options.env != 'mainnet' && options.env != 'testnet') {
                        console.log("Forking ".concat(options.env.length, " chains from custom data."));
                    }
                    chainsRaw = options.env == 'mainnet' ? info_1.mainnetInfo : options.env == 'testnet' ? info_1.testnetInfo : options.env;
                    chains = ((_a = options.chains) === null || _a === void 0 ? void 0 : _a.length) == 0
                        ? chainsRaw
                        : chainsRaw.filter(function (chain) { var _a; return ((_a = options.chains) === null || _a === void 0 ? void 0 : _a.find(function (name) { return name.toLocaleLowerCase() == chain.name.toLocaleLowerCase(); })) != null; });
                    i = 0;
                    _i = 0, chains_1 = chains;
                    _d.label = 1;
                case 1:
                    if (!(_i < chains_1.length)) return [3 /*break*/, 10];
                    chain = chains_1[_i];
                    return [4 /*yield*/, (0, networkUtils_1.forkNetwork)(chain, options.networkOptions)];
                case 2:
                    network = _d.sent();
                    info = network.getCloneInfo();
                    info.rpc = "http://localhost:".concat(options.port, "/").concat(i);
                    (info.tokenName = chain === null || chain === void 0 ? void 0 : chain.tokenName), (info.tokenSymbol = chain === null || chain === void 0 ? void 0 : chain.tokenSymbol), chains_local.push(info);
                    user = network.userWallets[0];
                    _b = 0, _c = options.accountsToFund;
                    _d.label = 3;
                case 3:
                    if (!(_b < _c.length)) return [3 /*break*/, 6];
                    account = _c[_b];
                    return [4 /*yield*/, user
                            .sendTransaction({
                            to: account,
                            value: options.fundAmount,
                        })
                            .then(function (tx) { return tx.wait(); })];
                case 4:
                    _d.sent();
                    _d.label = 5;
                case 5:
                    _b++;
                    return [3 /*break*/, 3];
                case 6:
                    if (!options.callback) return [3 /*break*/, 8];
                    return [4 /*yield*/, options.callback(network, info)];
                case 7:
                    _d.sent();
                    _d.label = 8;
                case 8:
                    i++;
                    _d.label = 9;
                case 9:
                    _i++;
                    return [3 /*break*/, 1];
                case 10:
                    (0, networkUtils_1.listen)(options.port);
                    interval = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                        var relayData;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, (0, relay_1.relay)()];
                                case 1:
                                    relayData = _a.sent();
                                    if (options.afterRelay)
                                        options.afterRelay(relayData);
                                    return [2 /*return*/];
                            }
                        });
                    }); }, options.relayInterval);
                    (0, utils_1.setJSON)(chains_local, options.chainOutputPath);
                    return [2 /*return*/];
            }
        });
    });
}
exports.forkAndExport = forkAndExport;
function destroyExported() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            (0, networkUtils_1.stopAll)();
            if (interval) {
                clearInterval(interval);
            }
            relay_1.gasLogs.length = 0;
            relay_1.gasLogsWithToken.length = 0;
            return [2 /*return*/];
        });
    });
}
exports.destroyExported = destroyExported;
//# sourceMappingURL=exportUtils.js.map