'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDepositAddress = exports.depositAddresses = exports.stopAll = exports.stop = exports.forkNetwork = exports.setupNetwork = exports.getAllNetworks = exports.getNetwork = exports.createNetwork = exports.listen = exports.getGasPrice = exports.getFee = void 0;
var ethers_1 = require("ethers");
var _a = ethers_1.ethers.utils, defaultAbiCoder = _a.defaultAbiCoder, keccak256 = _a.keccak256, id = _a.id, solidityPack = _a.solidityPack, toUtf8Bytes = _a.toUtf8Bytes;
var utils_1 = require("./utils");
var server_1 = __importDefault(require("./server"));
var Network_1 = require("./Network");
var merge = require('lodash').merge;
var fs = require('fs');
var IAxelarGateway = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGateway.sol/IAxelarGateway.json');
var IAxelarGasReceiver = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol/IAxelarGasService.json');
var ConstAddressDeployer = require('axelar-utils-solidity/dist/ConstAddressDeployer.json');
var AxelarGateway = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/AxelarGateway.sol/AxelarGateway.json');
var serverInstance;
var getFee = function (source, destination, alias) {
    return 1e6;
};
exports.getFee = getFee;
var getGasPrice = function (source, destination, tokenOnSource) {
    return 1;
};
exports.getGasPrice = getGasPrice;
function listen(port, callback) {
    if (callback === void 0) { callback = undefined; }
    if (!callback)
        callback = function () {
            utils_1.logger.log("Serving ".concat(Network_1.networks.length, " networks on port ").concat(port));
        };
    serverInstance = (0, server_1.default)(Network_1.networks);
    return serverInstance.listen(port, callback);
}
exports.listen = listen;
function createNetwork(options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var info, ganacheOptions_1, ganacheProvider, chain_1, chain, accounts, ganacheOptions, wallets, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(options.dbPath && fs.existsSync(options.dbPath + '/networkInfo.json'))) return [3 /*break*/, 2];
                    info = require(options.dbPath + '/networkInfo.json');
                    ganacheOptions_1 = __assign(__assign({ database: { dbPath: options.dbPath } }, options.ganacheOptions), { chain: {
                            vmErrorsOnRPCResponse: true,
                            chainId: info.chainId,
                            networkId: info.chainId,
                        }, logging: { quiet: true } });
                    merge(ganacheOptions_1, options.ganacheOptions);
                    ganacheProvider = require('ganache').provider(ganacheOptions_1);
                    return [4 /*yield*/, getNetwork(new ethers_1.providers.Web3Provider(ganacheProvider), info)];
                case 1:
                    chain_1 = _b.sent();
                    chain_1.ganacheProvider = ganacheProvider;
                    if (options.port) {
                        chain_1.port = options.port;
                        chain_1.server = (0, server_1.default)(chain_1).listen(chain_1.port, function () {
                            utils_1.logger.log("Serving ".concat(chain_1.name, " on port ").concat(chain_1.port));
                        });
                    }
                    return [2 /*return*/, chain_1];
                case 2:
                    chain = new Network_1.Network();
                    chain.name = options.name != null ? options.name : "Chain ".concat(Network_1.networks.length + 1);
                    chain.chainId = options.chainId || Network_1.networks.length + 2500;
                    utils_1.logger.log("Creating ".concat(chain.name, " with a chainId of ").concat(chain.chainId, "..."));
                    accounts = (0, utils_1.defaultAccounts)(20, options.seed);
                    ganacheOptions = {
                        database: { dbPath: options.dbPath },
                        wallet: {
                            accounts: accounts,
                        },
                        chain: {
                            chainId: chain.chainId,
                            networkId: chain.chainId,
                            vmErrorsOnRPCResponse: true,
                        },
                        logging: { quiet: true },
                    };
                    merge(ganacheOptions, options.ganacheOptions);
                    chain.ganacheProvider = require('ganache').provider(ganacheOptions);
                    chain.provider = new ethers_1.providers.Web3Provider(chain.ganacheProvider);
                    wallets = accounts.map(function (x) { return new ethers_1.Wallet(x.secretKey, chain.provider); });
                    chain.userWallets = wallets.splice(10, 20);
                    chain.ownerWallet = wallets[0], chain.operatorWallet = wallets[1], chain.relayerWallet = wallets[2];
                    chain.adminWallets = wallets.splice(4, 10);
                    chain.threshold = 3;
                    _a = chain;
                    return [4 /*yield*/, chain.provider.getBlockNumber()];
                case 3:
                    _a.lastRelayedBlock = _b.sent();
                    return [4 /*yield*/, chain._deployConstAddressDeployer()];
                case 4:
                    _b.sent();
                    return [4 /*yield*/, chain._deployGateway()];
                case 5:
                    _b.sent();
                    return [4 /*yield*/, chain._deployGasReceiver()];
                case 6:
                    _b.sent();
                    chain.tokens = {};
                    //chain.usdc = await chain.deployToken('Axelar Wrapped aUSDC', 'aUSDC', 6, BigInt(1e70));
                    if (options.port) {
                        chain.port = options.port;
                        chain.server = (0, server_1.default)(chain).listen(chain.port, function () {
                            utils_1.logger.log("Serving ".concat(chain.name, " on port ").concat(chain.port));
                        });
                    }
                    if (options.dbPath) {
                        (0, utils_1.setJSON)(chain.getInfo(), options.dbPath + '/networkInfo.json');
                    }
                    Network_1.networks.push(chain);
                    return [2 /*return*/, chain];
            }
        });
    });
}
exports.createNetwork = createNetwork;
function getNetwork(urlOrProvider, info) {
    if (info === void 0) { info = undefined; }
    return __awaiter(this, void 0, void 0, function () {
        var chain;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!info) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, utils_1.httpGet)(urlOrProvider + '/info')];
                case 1:
                    info = (_a.sent());
                    _a.label = 2;
                case 2:
                    chain = new Network_1.Network();
                    chain.name = info.name;
                    chain.chainId = info.chainId;
                    utils_1.logger.log("It is ".concat(chain.name, " and has a chainId of ").concat(chain.chainId, "..."));
                    if (typeof urlOrProvider == 'string') {
                        chain.provider = ethers_1.ethers.getDefaultProvider(urlOrProvider);
                        chain.isRemote = true;
                        chain.url = urlOrProvider;
                    }
                    else {
                        chain.provider = urlOrProvider;
                    }
                    chain.userWallets = info.userKeys.map(function (x) { return new ethers_1.Wallet(x, chain.provider); });
                    chain.ownerWallet = new ethers_1.Wallet(info.ownerKey, chain.provider);
                    chain.operatorWallet = new ethers_1.Wallet(info.operatorKey, chain.provider);
                    chain.relayerWallet = new ethers_1.Wallet(info.relayerKey, chain.provider);
                    chain.adminWallets = info.adminKeys.map(function (x) { return new ethers_1.Wallet(x, chain.provider); });
                    chain.threshold = info.threshold;
                    chain.lastRelayedBlock = info.lastRelayedBlock;
                    chain.tokens = info.tokens;
                    chain.constAddressDeployer = new ethers_1.Contract(info.constAddressDeployerAddress, ConstAddressDeployer.abi, chain.provider);
                    chain.gateway = new ethers_1.Contract(info.gatewayAddress, IAxelarGateway.abi, chain.provider);
                    chain.gasReceiver = new ethers_1.Contract(info.gasReceiverAddress, IAxelarGasReceiver.abi, chain.provider);
                    //chain.usdc = await chain.getTokenContract('aUSDC');
                    utils_1.logger.log("Its gateway is deployed at ".concat(chain.gateway.address, "."));
                    Network_1.networks.push(chain);
                    return [2 /*return*/, chain];
            }
        });
    });
}
exports.getNetwork = getNetwork;
/**
 * @returns {[Network]}
 */
function getAllNetworks(url) {
    return __awaiter(this, void 0, void 0, function () {
        var n, _a, i;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = parseInt;
                    return [4 /*yield*/, (0, utils_1.httpGet)(url + '/info')];
                case 1:
                    n = _a.apply(void 0, [(_b.sent())]);
                    i = 0;
                    _b.label = 2;
                case 2:
                    if (!(i < n)) return [3 /*break*/, 5];
                    return [4 /*yield*/, getNetwork(url + '/' + i)];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    i++;
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/, Network_1.networks];
            }
        });
    });
}
exports.getAllNetworks = getAllNetworks;
/**
 * @returns {Network}
 */
function setupNetwork(urlOrProvider, options) {
    return __awaiter(this, void 0, void 0, function () {
        var chain, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    chain = new Network_1.Network();
                    chain.name = options.name != null ? options.name : "Chain ".concat(Network_1.networks.length + 1);
                    chain.provider = typeof urlOrProvider === 'string' ? ethers_1.ethers.getDefaultProvider(urlOrProvider) : urlOrProvider;
                    _a = chain;
                    return [4 /*yield*/, chain.provider.getNetwork()];
                case 1:
                    _a.chainId = (_c.sent()).chainId;
                    utils_1.logger.log("Setting up ".concat(chain.name, " on a network with a chainId of ").concat(chain.chainId, "..."));
                    if (options.userKeys == null)
                        options.userKeys = [];
                    if (options.operatorKey == null)
                        options.operatorKey = options.ownerKey;
                    if (options.relayerKey == null)
                        options.relayerKey = options.ownerKey;
                    if (options.adminKeys == null)
                        options.adminKeys = [options.ownerKey];
                    chain.userWallets = options.userKeys.map(function (x) { return new ethers_1.Wallet(x, chain.provider); });
                    chain.ownerWallet = new ethers_1.Wallet(options.ownerKey, chain.provider);
                    chain.operatorWallet = new ethers_1.Wallet(options.operatorKey, chain.provider);
                    chain.relayerWallet = new ethers_1.Wallet(options.relayerKey, chain.provider);
                    chain.adminWallets = options.adminKeys.map(function (x) { return new ethers_1.Wallet(x, chain.provider); });
                    chain.threshold = options.threshold != null ? options.threshold : 1;
                    _b = chain;
                    return [4 /*yield*/, chain.provider.getBlockNumber()];
                case 2:
                    _b.lastRelayedBlock = _c.sent();
                    return [4 /*yield*/, chain._deployConstAddressDeployer()];
                case 3:
                    _c.sent();
                    return [4 /*yield*/, chain._deployGateway()];
                case 4:
                    _c.sent();
                    return [4 /*yield*/, chain._deployGasReceiver()];
                case 5:
                    _c.sent();
                    chain.tokens = {};
                    //chain.usdc = await chain.deployToken('Axelar Wrapped aUSDC', 'aUSDC', 6, BigInt(1e70));
                    Network_1.networks.push(chain);
                    return [2 /*return*/, chain];
            }
        });
    });
}
exports.setupNetwork = setupNetwork;
function forkNetwork(chainInfo, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var chain, accounts, forkProvider, gateway, KEY_ADMIN_EPOCH, adminEpoch, PREFIX_ADMIN_THRESHOLD, thresholdKey, oldThreshold, oldAdminAddresses, i, PREFIX_ADMIN, adminKey, address, ganacheOptions, merged, wallets, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (options.dbPath && fs.existsSync(options.dbPath + '/networkInfo.json')) {
                        throw new Error('Not supported, bug foivos if you need to fork and archive chains');
                    }
                    chain = new Network_1.Network();
                    chain.name = options.name != null ? options.name : chainInfo.name != null ? chainInfo.name : "Chain ".concat(Network_1.networks.length + 1);
                    chain.chainId = options.chainId || chainInfo.chainId || Network_1.networks.length + 2500;
                    utils_1.logger.log("Forking ".concat(chain.name, " with a chainId of ").concat(chain.chainId, "..."));
                    accounts = (0, utils_1.defaultAccounts)(20, options.seed);
                    forkProvider = (0, ethers_1.getDefaultProvider)(chainInfo.rpc);
                    gateway = new ethers_1.Contract(chainInfo.gateway, AxelarGateway.abi, forkProvider);
                    KEY_ADMIN_EPOCH = keccak256(toUtf8Bytes('admin-epoch'));
                    return [4 /*yield*/, gateway.getUint(KEY_ADMIN_EPOCH)];
                case 1:
                    adminEpoch = _b.sent();
                    PREFIX_ADMIN_THRESHOLD = keccak256(toUtf8Bytes('admin-threshold'));
                    thresholdKey = keccak256(solidityPack(['bytes32', 'uint256'], [PREFIX_ADMIN_THRESHOLD, adminEpoch]));
                    return [4 /*yield*/, gateway.getUint(thresholdKey)];
                case 2:
                    oldThreshold = _b.sent();
                    oldAdminAddresses = [];
                    i = 0;
                    _b.label = 3;
                case 3:
                    if (!(i < oldThreshold)) return [3 /*break*/, 6];
                    PREFIX_ADMIN = keccak256(toUtf8Bytes('admin'));
                    adminKey = keccak256(solidityPack(['bytes32', 'uint256', 'uint256'], [PREFIX_ADMIN, adminEpoch, i]));
                    return [4 /*yield*/, gateway.getAddress(adminKey)];
                case 4:
                    address = _b.sent();
                    oldAdminAddresses.push(address);
                    _b.label = 5;
                case 5:
                    i++;
                    return [3 /*break*/, 3];
                case 6:
                    ganacheOptions = {
                        database: { dbPath: options.dbPath },
                        wallet: {
                            accounts: accounts,
                            unlockedAccounts: oldAdminAddresses,
                        },
                        chain: {
                            chainId: chain.chainId,
                            networkId: chain.chainId,
                            vmErrorsOnRPCResponse: true,
                        },
                        fork: {
                            url: chainInfo.rpc,
                        },
                        logging: { quiet: true },
                    };
                    merged = merge(ganacheOptions, options.ganacheOptions);
                    chain.ganacheProvider = require('ganache').provider(merged);
                    chain.provider = new ethers_1.providers.Web3Provider(chain.ganacheProvider);
                    wallets = accounts.map(function (x) { return new ethers_1.Wallet(x.secretKey, chain.provider); });
                    chain.userWallets = wallets.splice(10, 20);
                    chain.ownerWallet = wallets[0], chain.operatorWallet = wallets[1], chain.relayerWallet = wallets[2];
                    chain.adminWallets = wallets.splice(4, 10);
                    chain.threshold = 3;
                    _a = chain;
                    return [4 /*yield*/, chain.provider.getBlockNumber()];
                case 7:
                    _a.lastRelayedBlock = _b.sent();
                    chain.constAddressDeployer = new ethers_1.Contract(chainInfo.constAddressDeployer, ConstAddressDeployer.abi, chain.provider);
                    chain.gateway = new ethers_1.Contract(chainInfo.gateway, AxelarGateway.abi, chain.provider);
                    return [4 /*yield*/, chain._upgradeGateway(oldAdminAddresses, oldThreshold)];
                case 8:
                    _b.sent();
                    chain.gasReceiver = new ethers_1.Contract(chainInfo.gasReceiver, IAxelarGasReceiver.abi, chain.provider);
                    chain.tokens = chainInfo.tokens;
                    if (options.port) {
                        chain.port = options.port;
                        chain.server = (0, server_1.default)(chain).listen(chain.port, function () {
                            utils_1.logger.log("Serving ".concat(chain.name, " on port ").concat(chain.port));
                        });
                    }
                    if (options.dbPath) {
                        (0, utils_1.setJSON)(chain.getInfo(), options.dbPath + '/networkInfo.json');
                    }
                    Network_1.networks.push(chain);
                    return [2 /*return*/, chain];
            }
        });
    });
}
exports.forkNetwork = forkNetwork;
function stop(network) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (typeof network == 'string')
                        network = Network_1.networks.find(function (chain) { return chain.name == network; });
                    if (!(network.server != null)) return [3 /*break*/, 2];
                    return [4 /*yield*/, network.server.close()];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    Network_1.networks.splice(Network_1.networks.indexOf(network), 1);
                    return [2 /*return*/];
            }
        });
    });
}
exports.stop = stop;
function stopAll() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(Network_1.networks.length > 0)) return [3 /*break*/, 2];
                    return [4 /*yield*/, stop(Network_1.networks[0])];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 0];
                case 2:
                    if (!serverInstance) return [3 /*break*/, 4];
                    return [4 /*yield*/, serverInstance.close()];
                case 3:
                    _a.sent();
                    serverInstance = null;
                    _a.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.stopAll = stopAll;
exports.depositAddresses = {};
function getDepositAddress(from, to, destinationAddress, alias, port) {
    var _a;
    if (port === void 0) { port = undefined; }
    if (typeof from != 'string')
        from = from.name;
    if (typeof to != 'string')
        to = to.name;
    if (!port) {
        var key = keccak256(id(from + ':' + to + ':' + destinationAddress + ':' + alias));
        var address = new ethers_1.Wallet(key).address;
        exports.depositAddresses[from] = (_a = {},
            _a[address] = {
                destinationChain: to,
                destinationAddress: destinationAddress,
                alias: alias,
                privateKey: key,
            },
            _a);
        return address;
    }
    return (0, utils_1.httpGet)("http:/localhost:".concat(port, "/getDepositAddress/").concat(from, "/").concat(to, "/").concat(destinationAddress, "/").concat(alias));
}
exports.getDepositAddress = getDepositAddress;
//# sourceMappingURL=networkUtils.js.map