import { providers } from 'ethers';
import { Network, NetworkOptions, NetworkInfo, NetworkSetup } from './Network';
export interface ChainCloneData {
    name: string;
    gateway: string;
    rpc: string;
    chainId: number;
    gasReceiver: string;
    constAddressDeployer: string;
    tokenName: string;
    tokenSymbol: string;
    tokens: {
        [key: string]: string;
    };
}
export declare const getFee: (source: string | Network, destination: string | Network, alias: string) => number;
export declare const getGasPrice: (source: string | Network, destination: string | Network, tokenOnSource: string) => number;
export declare function listen(port: number, callback?: (() => void) | undefined): any;
export declare function createNetwork(options?: NetworkOptions): Promise<Network>;
export declare function getNetwork(urlOrProvider: string | providers.Provider, info?: NetworkInfo | undefined): Promise<Network>;
/**
 * @returns {[Network]}
 */
export declare function getAllNetworks(url: string): Promise<Network[]>;
/**
 * @returns {Network}
 */
export declare function setupNetwork(urlOrProvider: string | providers.Provider, options: NetworkSetup): Promise<Network>;
export declare function forkNetwork(chainInfo: ChainCloneData, options?: NetworkOptions): Promise<Network>;
export declare function stop(network: string | Network): Promise<void>;
export declare function stopAll(): Promise<void>;
export declare const depositAddresses: any;
export declare function getDepositAddress(from: Network | string, to: Network | string, destinationAddress: string, alias: string, port?: number | undefined): string | Promise<unknown>;
//# sourceMappingURL=networkUtils.d.ts.map