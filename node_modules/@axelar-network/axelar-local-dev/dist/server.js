"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("http");
var networkUtils_1 = require("./networkUtils");
var relay_1 = require("./relay");
var hasOwnProperty = Object.prototype.hasOwnProperty;
function createCORSResponseHeaders(method, requestHeaders) {
    // https://fetch.spec.whatwg.org/#http-requests
    var headers = {};
    var isCORSRequest = hasOwnProperty.call(requestHeaders, 'origin');
    if (isCORSRequest) {
        // OPTIONS preflight requests need a little extra treatment
        if (method === 'OPTIONS') {
            // we only allow POST requests, so it doesn't matter which method the request is asking for
            headers['Access-Control-Allow-Methods'] = 'POST';
            // echo all requested access-control-request-headers back to the response
            if (hasOwnProperty.call(requestHeaders, 'access-control-request-headers')) {
                headers['Access-Control-Allow-Headers'] = requestHeaders['access-control-request-headers'];
            }
            // Safari needs Content-Length = 0 for a 204 response otherwise it hangs forever
            // https://github.com/expressjs/cors/pull/121#issue-130260174
            headers['Content-Length'] = 0;
            // Make browsers and compliant clients cache the OPTIONS preflight response for 10
            // minutes (this is the maximum time Chromium allows)
            headers['Access-Control-Max-Age'] = 600; // seconds
        }
        // From the spec: https://fetch.spec.whatwg.org/#http-responses
        // "For a CORS-preflight request, requestâ€™s credentials mode is always "omit",
        // but for any subsequent CORS requests it might not be. Support therefore
        // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.", so this
        // header is added to all requests.
        // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,
        // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials
        // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be
        // returned even when no credentials are set in the browser this header must always be return on all requests.
        // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)
        //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722
        //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802
        headers['Access-Control-Allow-Credentials'] = 1;
        // From the spec: "It cannot be reliably identified as participating in the CORS protocol
        // as the `Origin` header is also included for all requests whose method is neither
        // `GET` nor `HEAD`."
        // Explicitly set the origin instead of using *, since credentials
        // can't be used in conjunction with *. This will always be set
        /// for valid preflight requests.
        headers['Access-Control-Allow-Origin'] = requestHeaders.origin;
    }
    return headers;
}
function sendResponse(response, statusCode, headers, data) {
    if (data === void 0) { data = null; }
    response.writeHead(statusCode, headers);
    response.end(data);
}
function rpcError(id, code, msg) {
    return JSON.stringify({
        jsonrpc: '2.0',
        id: id,
        error: {
            code: code,
            message: msg,
        },
    });
}
function default_1(networkOrList, logger) {
    if (logger === void 0) { logger = { log: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        } }; }
    var server = (0, http_1.createServer)(function (request, response) {
        var method = request.method;
        var chunks = [];
        request
            .on('data', function (chunk) {
            chunks.push(chunk);
        })
            .on('end', function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var body, headers, badRequest, network, url, first, from, to, destinationAddress, symbol, n, _b, payload, i, item;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            body = Buffer.concat(chunks).toString();
                            headers = createCORSResponseHeaders(method, request.headers);
                            badRequest = function () {
                                headers['Content-Type'] = 'text/plain';
                                sendResponse(response, 400, headers, '400 Bad Request');
                            };
                            url = (_a = request.url) === null || _a === void 0 ? void 0 : _a.split('/');
                            if (!url)
                                return [2 /*return*/];
                            url === null || url === void 0 ? void 0 : url.shift();
                            if (Array.isArray(networkOrList)) {
                                if ((url === null || url === void 0 ? void 0 : url.length) == 0) {
                                    badRequest();
                                    return [2 /*return*/];
                                }
                                first = url === null || url === void 0 ? void 0 : url.shift();
                                if (first == 'info' && method == 'GET') {
                                    headers['Content-Type'] = 'application/json';
                                    sendResponse(response, 200, headers, JSON.stringify(networkOrList.length));
                                    return [2 /*return*/];
                                }
                                if (first == 'getDepositAddress' && method == 'GET') {
                                    headers['Content-Type'] = 'application/json';
                                    from = url[0].replace('%20', ' ');
                                    to = url[1].replace('%20', ' ');
                                    destinationAddress = url[2];
                                    symbol = url[3];
                                    sendResponse(response, 200, headers, JSON.stringify((0, networkUtils_1.getDepositAddress)(from, to, destinationAddress, symbol)));
                                    return [2 /*return*/];
                                }
                                n = parseInt(first);
                                if (n == NaN || n < 0 || n >= networkOrList.length) {
                                    badRequest();
                                    return [2 /*return*/];
                                }
                                network = networkOrList[n];
                            }
                            else {
                                network = networkOrList;
                            }
                            _b = method;
                            switch (_b) {
                                case 'POST': return [3 /*break*/, 1];
                                case 'OPTIONS': return [3 /*break*/, 2];
                                case 'GET': return [3 /*break*/, 3];
                            }
                            return [3 /*break*/, 8];
                        case 1:
                            try {
                                payload = JSON.parse(body);
                            }
                            catch (e) {
                                badRequest();
                                return [2 /*return*/];
                            }
                            // Log messages that come into the TestRPC via http
                            if (payload instanceof Array) {
                                // Batch request
                                for (i = 0; i < payload.length; i++) {
                                    item = payload[i];
                                    logger.log(item.method);
                                }
                            }
                            else {
                                logger.log(payload.method);
                            }
                            // http connections do not support subscriptions
                            if (payload.method === 'eth_subscribe' || payload.method === 'eth_unsubscribe') {
                                headers['Content-Type'] = 'application/json';
                                sendResponse(response, 400, headers, rpcError(payload.id, -32000, 'notifications not supported'));
                                return [3 /*break*/, 9];
                            }
                            if (network == null) {
                                badRequest();
                                return [2 /*return*/];
                            }
                            network.ganacheProvider.send(payload, function (_, result) {
                                headers['Content-Type'] = 'application/json';
                                sendResponse(response, 200, headers, JSON.stringify(result));
                            });
                            return [3 /*break*/, 9];
                        case 2:
                            sendResponse(response, 204, headers);
                            return [3 /*break*/, 9];
                        case 3:
                            if (url.length == 0) {
                                badRequest();
                                return [3 /*break*/, 9];
                            }
                            if (!(url[0] == 'info')) return [3 /*break*/, 4];
                            headers['Content-Type'] = 'application/json';
                            sendResponse(response, 200, headers, JSON.stringify(network.getInfo()));
                            return [3 /*break*/, 7];
                        case 4:
                            if (!(url[0] == 'relay')) return [3 /*break*/, 6];
                            response.writeHead(200, { 'Content-Type': 'application/json' });
                            logger.log("Relaying from ".concat(network.name, "."));
                            return [4 /*yield*/, (0, relay_1.relay)()];
                        case 5:
                            _c.sent();
                            response.end(JSON.stringify('Relayed!'));
                            return [3 /*break*/, 7];
                        case 6:
                            badRequest();
                            _c.label = 7;
                        case 7: return [3 /*break*/, 9];
                        case 8:
                            badRequest();
                            return [3 /*break*/, 9];
                        case 9: return [2 /*return*/];
                    }
                });
            });
        });
    });
    return server;
}
exports.default = default_1;
//# sourceMappingURL=server.js.map