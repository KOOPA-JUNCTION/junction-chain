'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteNetwork = exports.Network = exports.networks = void 0;
var ethers_1 = require("ethers");
var utils_1 = require("./utils");
var _a = ethers_1.ethers.utils, defaultAbiCoder = _a.defaultAbiCoder, arrayify = _a.arrayify, keccak256 = _a.keccak256, toUtf8Bytes = _a.toUtf8Bytes;
var _b = require('./utils'), getSignedExecuteInput = _b.getSignedExecuteInput, getRandomID = _b.getRandomID, deployContract = _b.deployContract;
var http_1 = __importDefault(require("http"));
var TokenDeployer = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/TokenDeployer.sol/TokenDeployer.json');
var AxelarGatewayProxy = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/AxelarGatewayProxy.sol/AxelarGatewayProxy.json');
var AxelarGateway = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/AxelarGateway.sol/AxelarGateway.json');
var IAxelarGateway = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGateway.sol/IAxelarGateway.json');
var BurnableMintableCappedERC20 = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/BurnableMintableCappedERC20.sol/BurnableMintableCappedERC20.json');
var Auth = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/AxelarAuthMultisig.sol/AxelarAuthMultisig.json');
var AxelarGasReceiver = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/gas-service/AxelarGasService.sol/AxelarGasService.json');
var AxelarGasReceiverProxy = require('../artifacts/@axelar-network/axelar-cgp-solidity/contracts/gas-service/AxelarGasServiceProxy.sol/AxelarGasServiceProxy.json');
var ConstAddressDeployer = require('axelar-utils-solidity/dist/ConstAddressDeployer.json');
var ROLE_OWNER = 1;
var ADDRESS_ZERO = '0x0000000000000000000000000000000000000000';
exports.networks = [];
/*
 * The Network class
 */
var Network = /** @class */ (function () {
    function Network(networkish) {
        if (networkish === void 0) { networkish = {}; }
        this.name = networkish.name;
        this.chainId = networkish.chainId;
        this.provider = networkish.provider;
        this.userWallets = networkish.userWallets;
        this.ownerWallet = networkish.ownerWallet;
        this.operatorWallet = networkish.operatorWallet;
        this.relayerWallet = networkish.relayerWallet;
        this.adminWallets = networkish.adminWallets;
        this.threshold = networkish.threshold;
        this.lastRelayedBlock = networkish.lastRelayedBlock;
        this.gateway = networkish.gateway;
        this.gasReceiver = networkish.gasReceiver;
        this.constAddressDeployer = networkish.constAddressDeployer;
        this.isRemote = networkish.isRemote;
        this.url = networkish.url;
        this.tokens = networkish.tokens;
    }
    Network.prototype._deployGateway = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, auth, tokenDeployer, gateway, proxy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        utils_1.logger.log("Deploying the Axelar Gateway for ".concat(this.name, "... "));
                        params = arrayify(defaultAbiCoder.encode(['address[]', 'uint8', 'bytes'], [this.adminWallets.map(function (wallet) { return wallet.address; }), this.threshold, '0x']));
                        return [4 /*yield*/, deployContract(this.ownerWallet, Auth, [
                                [defaultAbiCoder.encode(['address[]', 'uint256'], [[this.operatorWallet.address], 1])],
                            ])];
                    case 1:
                        auth = _a.sent();
                        return [4 /*yield*/, deployContract(this.ownerWallet, TokenDeployer)];
                    case 2:
                        tokenDeployer = _a.sent();
                        return [4 /*yield*/, deployContract(this.ownerWallet, AxelarGateway, [auth.address, tokenDeployer.address])];
                    case 3:
                        gateway = _a.sent();
                        return [4 /*yield*/, deployContract(this.ownerWallet, AxelarGatewayProxy, [gateway.address, params])];
                    case 4:
                        proxy = _a.sent();
                        return [4 /*yield*/, auth.transferOwnership(proxy.address)];
                    case 5: return [4 /*yield*/, (_a.sent()).wait()];
                    case 6:
                        _a.sent();
                        this.gateway = new ethers_1.Contract(proxy.address, IAxelarGateway.abi, this.provider);
                        utils_1.logger.log("Deployed at ".concat(this.gateway.address));
                        return [2 /*return*/, this.gateway];
                }
            });
        });
    };
    Network.prototype._upgradeGateway = function (oldAdminAddresses, oldThreshold) {
        if (oldAdminAddresses === void 0) { oldAdminAddresses = undefined; }
        if (oldThreshold === void 0) { oldThreshold = this.threshold; }
        return __awaiter(this, void 0, void 0, function () {
            var adminWallets, params, auth, tokenDeployer, gateway, implementationCode, implementationCodeHash, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        adminWallets = oldAdminAddresses != undefined
                            ? oldAdminAddresses.map(function (address) { return _this.provider.getSigner(address); })
                            : this.adminWallets;
                        utils_1.logger.log("Upgrading the Axelar Gateway for ".concat(this.name, "... "));
                        params = arrayify(defaultAbiCoder.encode(['address[]', 'uint256', 'bytes'], [this.adminWallets.map(function (wallet) { return wallet.address; }), this.threshold, '0x']));
                        return [4 /*yield*/, deployContract(this.ownerWallet, Auth, [
                                [defaultAbiCoder.encode(['address[]', 'uint256'], [[this.operatorWallet.address], 1])],
                            ])];
                    case 1:
                        auth = _a.sent();
                        return [4 /*yield*/, deployContract(this.ownerWallet, TokenDeployer)];
                    case 2:
                        tokenDeployer = _a.sent();
                        return [4 /*yield*/, deployContract(this.ownerWallet, AxelarGateway, [auth.address, tokenDeployer.address])];
                    case 3:
                        gateway = _a.sent();
                        return [4 /*yield*/, this.provider.getCode(gateway.address)];
                    case 4:
                        implementationCode = _a.sent();
                        implementationCodeHash = keccak256(implementationCode);
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < oldThreshold)) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.gateway.connect(adminWallets[i]).upgrade(gateway.address, implementationCodeHash, params)];
                    case 6: return [4 /*yield*/, (_a.sent()).wait()];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 5];
                    case 9: return [4 /*yield*/, auth.transferOwnership(this.gateway.address)];
                    case 10: return [4 /*yield*/, (_a.sent()).wait()];
                    case 11:
                        _a.sent();
                        utils_1.logger.log("Upgraded ".concat(this.gateway.address));
                        return [2 /*return*/, this.gateway];
                }
            });
        });
    };
    Network.prototype._deployGasReceiver = function () {
        return __awaiter(this, void 0, void 0, function () {
            var gasReceiver, gasReceiverProxy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        utils_1.logger.log("Deploying the Axelar Gas Receiver for ".concat(this.name, "... "));
                        return [4 /*yield*/, deployContract(this.ownerWallet, AxelarGasReceiver, [])];
                    case 1:
                        gasReceiver = _a.sent();
                        return [4 /*yield*/, deployContract(this.ownerWallet, AxelarGasReceiverProxy, [
                                gasReceiver.address,
                                defaultAbiCoder.encode(['address', 'address'], [this.ownerWallet.address, this.gateway.address]),
                            ])];
                    case 2:
                        gasReceiverProxy = _a.sent();
                        this.gasReceiver = new ethers_1.Contract(gasReceiverProxy.address, AxelarGasReceiver.abi, this.provider);
                        utils_1.logger.log("Deployed at ".concat(this.gasReceiver.address));
                        return [2 /*return*/, this.gasReceiver];
                }
            });
        });
    };
    Network.prototype._deployConstAddressDeployer = function () {
        return __awaiter(this, void 0, void 0, function () {
            var constAddressDeployerDeployerPrivateKey, deployerWallet, constAddressDeployer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        utils_1.logger.log("Deploying the ConstAddressDeployer for ".concat(this.name, "... "));
                        constAddressDeployerDeployerPrivateKey = keccak256(toUtf8Bytes('const-address-deployer-deployer'));
                        deployerWallet = new ethers_1.Wallet(constAddressDeployerDeployerPrivateKey, this.provider);
                        return [4 /*yield*/, this.ownerWallet
                                .sendTransaction({
                                to: deployerWallet.address,
                                value: BigInt(1e18),
                            })
                                .then(function (tx) { return tx.wait(); })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, deployContract(deployerWallet, ConstAddressDeployer, [])];
                    case 2:
                        constAddressDeployer = _a.sent();
                        this.constAddressDeployer = new ethers_1.Contract(constAddressDeployer.address, ConstAddressDeployer.abi, this.provider);
                        utils_1.logger.log("Deployed at ".concat(this.constAddressDeployer.address));
                        return [2 /*return*/, this.constAddressDeployer];
                }
            });
        });
    };
    Network.prototype.deployToken = function (name, symbol, decimals, cap, address, alias) {
        if (address === void 0) { address = ADDRESS_ZERO; }
        if (alias === void 0) { alias = symbol; }
        return __awaiter(this, void 0, void 0, function () {
            var data, signedData, tokenAddress, tokenContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        utils_1.logger.log("Deploying ".concat(name, " for ").concat(this.name, "... "));
                        data = arrayify(defaultAbiCoder.encode(['uint256', 'bytes32[]', 'string[]', 'bytes[]'], [
                            this.chainId,
                            [getRandomID()],
                            ['deployToken'],
                            [
                                defaultAbiCoder.encode(['string', 'string', 'uint8', 'uint256', 'address', 'uint256'], [name, symbol, decimals, cap, address, 0]),
                            ],
                        ]));
                        return [4 /*yield*/, getSignedExecuteInput(data, this.operatorWallet)];
                    case 1:
                        signedData = _a.sent();
                        return [4 /*yield*/, this.gateway.connect(this.ownerWallet).execute(signedData, { gasLimit: BigInt(1e7) })];
                    case 2: return [4 /*yield*/, (_a.sent()).wait()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.gateway.tokenAddresses(symbol)];
                    case 4:
                        tokenAddress = _a.sent();
                        tokenContract = new ethers_1.Contract(tokenAddress, BurnableMintableCappedERC20.abi, this.ownerWallet);
                        utils_1.logger.log("Deployed at ".concat(tokenContract.address));
                        this.tokens[alias] = symbol;
                        return [2 /*return*/, tokenContract];
                }
            });
        });
    };
    Network.prototype.getTokenContract = function (alias) {
        return __awaiter(this, void 0, void 0, function () {
            var symbol, address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        symbol = this.tokens[alias];
                        return [4 /*yield*/, this.gateway.tokenAddresses(symbol)];
                    case 1:
                        address = _a.sent();
                        return [2 /*return*/, new ethers_1.Contract(address, BurnableMintableCappedERC20.abi, this.provider)];
                }
            });
        });
    };
    Network.prototype.giveToken = function (address, alias, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var symbol, data, signedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        symbol = this.tokens[alias] || alias;
                        data = arrayify(defaultAbiCoder.encode(['uint256', 'uint256', 'bytes32[]', 'string[]', 'bytes[]'], [
                            this.chainId,
                            ROLE_OWNER,
                            [getRandomID()],
                            ['mintToken'],
                            [defaultAbiCoder.encode(['string', 'address', 'uint256'], [symbol, address, amount])],
                        ]));
                        return [4 /*yield*/, getSignedExecuteInput(data, this.operatorWallet)];
                    case 1:
                        signedData = _a.sent();
                        return [4 /*yield*/, this.gateway.connect(this.ownerWallet).execute(signedData, { gasLimit: BigInt(1e7) })];
                    case 2: return [4 /*yield*/, (_a.sent()).wait()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Network.prototype.getInfo = function () {
        var info = {
            name: this.name,
            chainId: this.chainId,
            userKeys: this.userWallets.map(function (wallet) { return wallet.privateKey; }),
            ownerKey: this.ownerWallet.privateKey,
            operatorKey: this.operatorWallet.privateKey,
            relayerKey: this.relayerWallet.privateKey,
            adminKeys: this.adminWallets.map(function (wallet) { return wallet.privateKey; }),
            threshold: this.threshold,
            lastRelayedBlock: this.lastRelayedBlock,
            gatewayAddress: this.gateway.address,
            gasReceiverAddress: this.gasReceiver.address,
            constAddressDeployerAddress: this.constAddressDeployer.address,
            tokens: this.tokens,
        };
        return info;
    };
    Network.prototype.getCloneInfo = function () {
        return {
            name: this.name,
            chainId: this.chainId,
            gateway: this.gateway.address,
            gasReceiver: this.gasReceiver.address,
            constAddressDeployer: this.constAddressDeployer.address,
            tokens: this.tokens,
        };
    };
    return Network;
}());
exports.Network = Network;
var RemoteNetwork = /** @class */ (function (_super) {
    __extends(RemoteNetwork, _super);
    function RemoteNetwork() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RemoteNetwork.prototype.relay = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                            http_1.default.get(_this.url + '/relay', function (res) {
                                var statusCode = res.statusCode;
                                if (statusCode !== 200) {
                                    reject(null);
                                }
                                res.on('data', function (chunk) { });
                                res.on('end', function () {
                                    resolve(null);
                                });
                            });
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return RemoteNetwork;
}(Network));
exports.RemoteNetwork = RemoteNetwork;
//# sourceMappingURL=Network.js.map