import { ethers, BigNumber, Wallet } from 'ethers';
export declare const logger: {
    log: {
        (...data: any[]): void;
        (message?: any, ...optionalParams: any[]): void;
    };
};
export declare function bigNumberToNumber(bigNumber: BigNumber): number;
export declare function getSignedExecuteInput(data: any, wallet: Wallet): Promise<string>;
export declare function getSignedMultisigExecuteInput(data: any, wallets: Wallet[]): Promise<string>;
export declare const getRandomID: () => string;
export declare const getLogID: (chain: string, log: any) => string;
export declare const defaultAccounts: (n: number, seed?: string) => {
    balance: bigint;
    secretKey: string;
}[];
export declare const deployContract: (wallet: Wallet, contractJson: any, args?: never[], options?: {}) => Promise<ethers.Contract>;
export declare const setJSON: (data: any, name: string) => void;
export declare const httpGet: (url: string) => Promise<unknown>;
export declare function setLogger(log: (...args: any) => void): void;
//# sourceMappingURL=utils.d.ts.map